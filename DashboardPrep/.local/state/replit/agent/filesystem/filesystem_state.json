{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Golf Analytics Pro\n\n## Overview\n\nGolf Analytics Pro is a professional-grade golf course analysis and shot optimization platform. The application combines 3D visualization with advanced mathematical models to provide golfers with data-driven insights for course strategy and shot selection.\n\nThe system features a comprehensive \"Prepare\" tab that allows users to load golf courses, navigate holes, set up shots with start/aim/pin positions, analyze dispersion patterns based on skill level, and optimize aim points using Expected Strokes calculations. The platform leverages real course data enhanced with crowd-sourced improvements and provides tools for drawing course conditions like greens, fairways, bunkers, and hazards.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Framework**: Tailwind CSS with shadcn/ui components for consistent, modern interface\n- **State Management**: Custom React hooks with typed event dispatch system for prepare tab functionality\n- **3D Visualization**: Cesium.js integration for terrain rendering and course visualization\n- **Query Management**: TanStack Query for efficient data fetching and caching\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Language**: TypeScript throughout the entire stack for type safety\n- **Database ORM**: Drizzle ORM with PostgreSQL as the primary database\n- **Session Management**: PostgreSQL-backed session storage using connect-pg-simple\n- **API Design**: RESTful endpoints with typed request/response schemas using Zod validation\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with spatial data support (PostGIS geometry types)\n- **Schema Design**: Normalized structure with courses, holes, OSM features, and user-generated polygons\n- **Spatial Data**: Course boundaries stored as bounding boxes, hole geometries as PostGIS geometry types\n- **Migration System**: Drizzle Kit for database schema migrations and type-safe database operations\n\n### Core Mathematical Engine\n- **Expected Strokes Engine**: Proprietary black-box calculation engine for shot outcome prediction\n- **Dispersion Modeling**: Uniform ellipse sampling based on skill presets (distance percentage and offline angle)\n- **Optimization Algorithm**: Cross-Entropy Method (CEM) implementation for aim point optimization\n- **Statistical Analysis**: Progressive statistics with confidence intervals for shot dispersion analysis\n\n### Specialized Components\n- **Course Data Integration**: OpenStreetMap (OSM) integration via Overpass API with crowd-sourced enhancements\n- **Sampling System**: Halton sequence quasi-random sampling for efficient dispersion pattern generation\n- **Web Workers**: Dedicated workers for Expected Strokes calculations and aim optimization to maintain UI responsiveness\n- **Real-time Updates**: Event-driven state management for live updates across prepare tab components\n\n### Authentication and Authorization\n- **Session-based Authentication**: Server-side session management with PostgreSQL storage\n- **User Management**: Basic user system with support for user-generated course condition polygons\n- **Data Access Control**: Course and hole data access patterns with user-specific polygon associations\n\n## External Dependencies\n\n### Database and Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting via @neondatabase/serverless\n- **PostGIS**: Spatial database extension for geographic data types and operations\n\n### Mapping and Visualization\n- **Cesium.js**: 3D globe and map visualization engine for course terrain rendering\n- **Google 3D Tiles**: Optional photorealistic 3D imagery integration\n- **OpenStreetMap**: Course feature data via Overpass API queries\n- **Nominatim**: Geocoding service for course search functionality\n\n### UI and Styling\n- **Radix UI**: Comprehensive primitive component library (@radix-ui/react-*)\n- **Tailwind CSS**: Utility-first CSS framework with custom golf-specific color palette\n- **Lucide Icons**: Icon library with Font Awesome as supplementary icon source\n- **shadcn/ui**: Pre-built component system built on Radix primitives\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server with React plugin\n- **TypeScript**: Static type checking across entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Replit Integration**: Development environment plugins for Replit platform support\n\n### Mathematical and Data Processing\n- **Drizzle ORM**: Type-safe database ORM with Zod schema integration\n- **Date-fns**: Date manipulation library for temporal data handling\n- **React Hook Form**: Form handling with @hookform/resolvers for validation\n- **Class Variance Authority**: Utility for component variant management","size_bytes":4884},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertUserPolygonSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Golf course routes\n  app.get(\"/api/courses\", async (req, res) => {\n    try {\n      const courses = await storage.getCourses();\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/curated\", async (req, res) => {\n    try {\n      let near;\n      if (req.query.near) {\n        const [lat, lon] = String(req.query.near).split(',').map(Number);\n        if (!isNaN(lat) && !isNaN(lon)) {\n          near = { lat, lon };\n        }\n      }\n      const courses = await storage.getCuratedCourses(near);\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch curated courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const course = await storage.getCourseById(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  app.get(\"/api/courses/:courseId/holes\", async (req, res) => {\n    try {\n      const holes = await storage.getHolesByCourseId(req.params.courseId);\n      res.json(holes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch holes\" });\n    }\n  });\n\n  app.get(\"/api/holes/:id\", async (req, res) => {\n    try {\n      const hole = await storage.getHoleById(req.params.id);\n      if (!hole) {\n        return res.status(404).json({ message: \"Hole not found\" });\n      }\n      res.json(hole);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hole\" });\n    }\n  });\n\n  // User polygon routes\n  app.get(\"/api/holes/:holeId/polygons\", async (req, res) => {\n    try {\n      const polygons = await storage.getUserPolygons(req.params.holeId);\n      res.json(polygons);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch polygons\" });\n    }\n  });\n\n  app.post(\"/api/holes/:holeId/polygons\", async (req, res) => {\n    try {\n      const validation = insertUserPolygonSchema.extend({\n        holeId: z.string(),\n      }).safeParse({ ...req.body, holeId: req.params.holeId });\n\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid polygon data\", errors: validation.error.errors });\n      }\n\n      const polygon = await storage.createUserPolygon(validation.data);\n      res.status(201).json(polygon);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create polygon\" });\n    }\n  });\n\n  // Placeholder routes for future Supabase Edge functions\n  app.post(\"/api/overpass/fetch\", async (req, res) => {\n    // TODO: Implement Overpass API integration\n    res.status(501).json({ message: \"Overpass fetch not yet implemented\" });\n  });\n\n  app.post(\"/api/features/merge\", async (req, res) => {\n    // TODO: Implement feature merging\n    res.status(501).json({ message: \"Feature merging not yet implemented\" });\n  });\n\n  app.post(\"/api/masks/bake\", async (req, res) => {\n    // TODO: Implement mask baking\n    res.status(501).json({ message: \"Mask baking not yet implemented\" });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3522},"server/storage.ts":{"content":"import { type Course, type InsertCourse, type Hole, type InsertHole, type UserPolygon, type InsertUserPolygon, type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods (keep existing)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Course methods\n  getCourses(): Promise<Course[]>;\n  getCourseById(id: string): Promise<Course | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  getCuratedCourses(near?: { lat: number; lon: number }): Promise<Course[]>;\n  \n  // Hole methods\n  getHolesByCourseId(courseId: string): Promise<Hole[]>;\n  getHoleById(id: string): Promise<Hole | undefined>;\n  createHole(hole: InsertHole): Promise<Hole>;\n  \n  // User polygon methods\n  getUserPolygons(holeId: string): Promise<UserPolygon[]>;\n  createUserPolygon(polygon: InsertUserPolygon): Promise<UserPolygon>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private courses: Map<string, Course>;\n  private holes: Map<string, Hole>;\n  private userPolygons: Map<string, UserPolygon>;\n\n  constructor() {\n    this.users = new Map();\n    this.courses = new Map();\n    this.holes = new Map();\n    this.userPolygons = new Map();\n    \n    // Initialize with sample golf courses\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample courses\n    const pebbleBeach: Course = {\n      id: \"pebble-beach-1\",\n      name: \"Pebble Beach Golf Links\",\n      location: \"Pebble Beach, CA\",\n      bbox: { west: -121.95, south: 36.56, east: -121.93, north: 36.58 },\n      qualityScore: \"9.8\",\n      status: \"active\",\n      synonyms: [\"Pebble Beach\", \"PBGL\"],\n      enhanced: true,\n      thumbnailUrl: \"https://images.unsplash.com/photo-1587174486073-ae5e5cff23aa?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\",\n      createdAt: new Date(),\n    };\n\n    const stAndrews: Course = {\n      id: \"st-andrews-old-1\",\n      name: \"St. Andrews Old Course\",\n      location: \"St. Andrews, Scotland\",\n      bbox: { west: -2.84, south: 56.34, east: -2.80, north: 56.36 },\n      qualityScore: \"9.9\",\n      status: \"active\",\n      synonyms: [\"St. Andrews\", \"Old Course\"],\n      enhanced: true,\n      thumbnailUrl: \"https://images.unsplash.com/photo-1535131749006-b7f58c99034b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\",\n      createdAt: new Date(),\n    };\n\n    const augusta: Course = {\n      id: \"augusta-national-1\",\n      name: \"Augusta National Golf Club\",\n      location: \"Augusta, GA\",\n      bbox: { west: -82.03, south: 33.50, east: -82.01, north: 33.52 },\n      qualityScore: \"9.7\",\n      status: \"active\",\n      synonyms: [\"Augusta National\", \"Augusta\"],\n      enhanced: true,\n      thumbnailUrl: \"https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\",\n      createdAt: new Date(),\n    };\n\n    this.courses.set(pebbleBeach.id, pebbleBeach);\n    this.courses.set(stAndrews.id, stAndrews);\n    this.courses.set(augusta.id, augusta);\n\n    // Sample holes for St. Andrews (current selection)\n    for (let i = 1; i <= 18; i++) {\n      const hole: Hole = {\n        id: `st-andrews-hole-${i}`,\n        courseId: stAndrews.id,\n        number: i,\n        par: i <= 6 ? 4 : i <= 12 ? (i % 2 === 0 ? 3 : 4) : (i % 2 === 0 ? 5 : 4),\n        yards: 300 + Math.floor(Math.random() * 200) + (i > 12 ? 100 : 0),\n        handicap: ((i - 1) % 18) + 1,\n        viewBookmarks: {\n          teeView: { lat: 56.348 + (i * 0.001), lon: -2.82 + (i * 0.001), alt: 50 },\n          greenView: { lat: 56.349 + (i * 0.001), lon: -2.819 + (i * 0.001), alt: 30 },\n          overview: { lat: 56.3485 + (i * 0.001), lon: -2.8195 + (i * 0.001), alt: 200 }\n        },\n        teePoints: null,\n        greenPolygon: null,\n      };\n      this.holes.set(hole.id, hole);\n    }\n  }\n\n  // User methods (existing)\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Course methods\n  async getCourses(): Promise<Course[]> {\n    return Array.from(this.courses.values());\n  }\n\n  async getCourseById(id: string): Promise<Course | undefined> {\n    return this.courses.get(id);\n  }\n\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const id = randomUUID();\n    const newCourse: Course = { \n      ...course, \n      id, \n      createdAt: new Date(),\n      bbox: course.bbox || null,\n      status: course.status || 'active',\n      location: course.location || null,\n      qualityScore: course.qualityScore || null,\n      synonyms: course.synonyms || null,\n      enhanced: course.enhanced || false,\n      thumbnailUrl: course.thumbnailUrl || null\n    };\n    this.courses.set(id, newCourse);\n    return newCourse;\n  }\n\n  async getCuratedCourses(near?: { lat: number; lon: number }): Promise<Course[]> {\n    const courses = Array.from(this.courses.values()).filter(c => c.enhanced);\n    // Simple distance-based sorting if near is provided\n    if (near) {\n      return courses.sort((a, b) => {\n        const aDist = Math.abs((a.bbox as any)?.west - near.lon) + Math.abs((a.bbox as any)?.south - near.lat);\n        const bDist = Math.abs((b.bbox as any)?.west - near.lon) + Math.abs((b.bbox as any)?.south - near.lat);\n        return aDist - bDist;\n      });\n    }\n    return courses.sort((a, b) => parseFloat(b.qualityScore || \"0\") - parseFloat(a.qualityScore || \"0\"));\n  }\n\n  // Hole methods\n  async getHolesByCourseId(courseId: string): Promise<Hole[]> {\n    return Array.from(this.holes.values())\n      .filter(h => h.courseId === courseId)\n      .sort((a, b) => a.number - b.number);\n  }\n\n  async getHoleById(id: string): Promise<Hole | undefined> {\n    return this.holes.get(id);\n  }\n\n  async createHole(hole: InsertHole): Promise<Hole> {\n    const id = randomUUID();\n    const newHole: Hole = { \n      ...hole, \n      id,\n      yards: hole.yards || null,\n      handicap: hole.handicap || null,\n      viewBookmarks: hole.viewBookmarks || null,\n      teePoints: hole.teePoints || null,\n      greenPolygon: hole.greenPolygon || null\n    };\n    this.holes.set(id, newHole);\n    return newHole;\n  }\n\n  // User polygon methods\n  async getUserPolygons(holeId: string): Promise<UserPolygon[]> {\n    return Array.from(this.userPolygons.values()).filter(p => p.holeId === holeId);\n  }\n\n  async createUserPolygon(polygon: InsertUserPolygon): Promise<UserPolygon> {\n    const id = randomUUID();\n    const newPolygon: UserPolygon = { \n      ...polygon, \n      id, \n      createdAt: new Date(),\n      status: polygon.status || 'active',\n      holeId: polygon.holeId || null,\n      geom: polygon.geom || null,\n      authorId: polygon.authorId || null,\n      notes: polygon.notes || null\n    };\n    this.userPolygons.set(id, newPolygon);\n    return newPolygon;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7278},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, jsonb, boolean, timestamp, geometry } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\"),\n  bbox: jsonb(\"bbox\"),\n  qualityScore: decimal(\"quality_score\", { precision: 3, scale: 2 }),\n  status: text(\"status\").default(\"active\"),\n  synonyms: jsonb(\"synonyms\"),\n  enhanced: boolean(\"enhanced\").default(false),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const holes = pgTable(\"holes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  number: integer(\"number\").notNull(),\n  par: integer(\"par\").notNull(),\n  yards: integer(\"yards\"),\n  handicap: integer(\"handicap\"),\n  viewBookmarks: jsonb(\"view_bookmarks\"),\n  teePoints: geometry(\"tee_points\"),\n  greenPolygon: geometry(\"green_polygon\"),\n});\n\nexport const osmFeatures = pgTable(\"osm_features\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  holeId: varchar(\"hole_id\").references(() => holes.id),\n  ftype: text(\"ftype\").notNull(),\n  geom: geometry(\"geom\"),\n  source: text(\"source\").default(\"overpass\"),\n  version: integer(\"version\").default(1),\n});\n\nexport const userPolygons = pgTable(\"user_polygons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  holeId: varchar(\"hole_id\").references(() => holes.id),\n  ftype: text(\"ftype\").notNull(),\n  geom: geometry(\"geom\"),\n  authorId: varchar(\"author_id\"),\n  status: text(\"status\").default(\"active\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mergedFeatures = pgTable(\"merged_features\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  holeId: varchar(\"hole_id\").references(() => holes.id),\n  ftype: text(\"ftype\").notNull(),\n  geom: geometry(\"geom\"),\n  version: integer(\"version\").default(1),\n  builtFrom: jsonb(\"built_from\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const holeMasks = pgTable(\"hole_masks\", {\n  holeId: varchar(\"hole_id\").primaryKey().references(() => holes.id),\n  palettePngUrl: text(\"palette_png_url\"),\n  slopePngUrl: text(\"slope_png_url\"),\n  width: integer(\"width\"),\n  height: integer(\"height\"),\n  bbox: jsonb(\"bbox\"),\n  paletteVersion: integer(\"palette_version\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHoleSchema = createInsertSchema(holes).omit({\n  id: true,\n});\n\nexport const insertUserPolygonSchema = createInsertSchema(userPolygons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertHole = z.infer<typeof insertHoleSchema>;\nexport type Hole = typeof holes.$inferSelect;\nexport type InsertUserPolygon = z.infer<typeof insertUserPolygonSchema>;\nexport type UserPolygon = typeof userPolygons.$inferSelect;\nexport type OSMFeature = typeof osmFeatures.$inferSelect;\nexport type MergedFeature = typeof mergedFeatures.$inferSelect;\nexport type HoleMask = typeof holeMasks.$inferSelect;\n\n// Remove existing user schema to focus on golf data\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":4152},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":714},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(173, 88%, 25%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 24%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(159, 88%, 35%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(173, 88%, 25%);\n  --chart-1: hsl(173, 88%, 25%);\n  --chart-2: hsl(159, 88%, 35%);\n  --chart-3: hsl(120, 60%, 50%);\n  --chart-4: hsl(60, 90%, 55%);\n  --chart-5: hsl(220, 70%, 50%);\n  --golf-green: hsl(120, 60%, 50%);\n  --golf-fairway: hsl(82, 84%, 46%);\n  --golf-rough: hsl(210, 7%, 64%);\n  --golf-sand: hsl(54, 91%, 70%);\n  --golf-water: hsl(220, 91%, 61%);\n  --golf-hazard: hsl(0, 91%, 62%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(173, 88%, 35%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(159, 88%, 45%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(173, 88%, 35%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', 'var(--font-sans)', ui-sans-serif, system-ui;\n  }\n}\n\n@layer components {\n  .tab-button {\n    @apply transition-all duration-200;\n  }\n  \n  .tab-button.active {\n    @apply border-primary text-primary;\n  }\n\n  .golf-condition-green {\n    background-color: var(--golf-green);\n  }\n  \n  .golf-condition-fairway {\n    background-color: var(--golf-fairway);\n  }\n  \n  .golf-condition-rough {\n    background-color: var(--golf-rough);\n  }\n  \n  .golf-condition-sand {\n    background-color: var(--golf-sand);\n  }\n  \n  .golf-condition-water {\n    background-color: var(--golf-water);\n  }\n  \n  .golf-condition-hazard {\n    background-color: var(--golf-hazard);\n  }\n}\n\n@layer utilities {\n  .touch-target {\n    @apply min-h-[44px] min-w-[44px];\n  }\n}\n\n/* Cesium overrides */\n.cesium-viewer-toolbar,\n.cesium-viewer-animationContainer,\n.cesium-viewer-bottomContainer,\n.cesium-viewer-fullscreenContainer {\n  display: none !important;\n}\n\n.cesium-widget-credits {\n  display: none !important;\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n  .mobile-stack {\n    @apply flex flex-col gap-6;\n  }\n  \n  .mobile-stack > * {\n    @apply col-span-1;\n  }\n}\n\n/* Touch-friendly controls */\n@media (max-width: 1024px) {\n  button, select, input {\n    @apply touch-target;\n  }\n  \n  .hole-grid button {\n    @apply min-h-[36px] min-w-[36px];\n  }\n}\n","size_bytes":3517},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/usePrepareState.ts":{"content":"import { useState, useCallback } from 'react';\nimport { PrepareState, PrepareEvent, SKILL_PRESETS, LatLon } from '../lib/types';\n\nconst initialState: PrepareState = {\n  courseId: 'st-andrews-old-1', // Default to St. Andrews\n  holeId: 'st-andrews-hole-1',\n  currentHole: 1,\n  bounds: null,\n  viewBookmarks: null,\n  mergedFeaturesVersion: 1,\n  maskPngMeta: null,\n  slopePngMeta: null,\n  start: { lat: 56.348, lon: -2.82 }, // St. Andrews 1st tee\n  pin: { lat: 56.3495, lon: -2.8185 }, // St. Andrews 1st green\n  aim: { lat: 56.3487, lon: -2.8192 }, // Fairway center\n  skillPreset: SKILL_PRESETS[1], // Elite Am\n  maxCarry: 280,\n  photorealEnabled: false,\n};\n\nexport function usePrepareState() {\n  const [state, setState] = useState<PrepareState>(initialState);\n\n  const dispatch = useCallback((event: PrepareEvent) => {\n    setState(prevState => {\n      switch (event.type) {\n        case 'COURSE_LOADED':\n          return {\n            ...prevState,\n            courseId: event.payload.courseId,\n            currentHole: 1,\n            holeId: `${event.payload.courseId.replace('course-', '')}-hole-1`,\n          };\n\n        case 'HOLE_CHANGED':\n          return {\n            ...prevState,\n            holeId: event.payload.holeId,\n            currentHole: event.payload.holeNumber,\n            // Reset points when changing holes\n            start: null,\n            pin: null,\n            aim: null,\n          };\n\n        case 'POINT_SET':\n          return {\n            ...prevState,\n            [event.payload.type]: event.payload.point,\n          };\n\n        case 'SKILL_CHANGED':\n          return {\n            ...prevState,\n            skillPreset: event.payload.skill,\n          };\n\n        case 'VIEW_PRESET_SELECTED':\n          // Handle camera view changes\n          return prevState;\n\n        case 'SAMPLES_UPDATED':\n          // Handle ES sampling updates\n          return prevState;\n\n        case 'OPTIMIZER_RESULT':\n          // Handle optimizer results\n          return prevState;\n\n        case 'POLYGONS_CHANGED':\n          // Handle polygon changes\n          return prevState;\n\n        default:\n          return prevState;\n      }\n    });\n  }, []);\n\n  const setPoint = useCallback((type: 'start' | 'aim' | 'pin', point: LatLon) => {\n    dispatch({ type: 'POINT_SET', payload: { type, point } });\n  }, [dispatch]);\n\n  const changeHole = useCallback((holeNumber: number) => {\n    const holeId = `${state.courseId?.replace('-1', '')}-hole-${holeNumber}`;\n    dispatch({ type: 'HOLE_CHANGED', payload: { holeId, holeNumber } });\n  }, [state.courseId, dispatch]);\n\n  const setSkill = useCallback((skill: typeof SKILL_PRESETS[0]) => {\n    dispatch({ type: 'SKILL_CHANGED', payload: { skill } });\n  }, [dispatch]);\n\n  return {\n    state,\n    dispatch,\n    setPoint,\n    changeHole,\n    setSkill,\n  };\n}\n","size_bytes":2816},"client/src/lib/expectedStrokes.ts":{"content":"import { ClassId } from './types';\n\n// Expected Strokes Engine - Preserve as black box as specified\nexport class ExpectedStrokesEngine {\n  private cache: Map<string, number> = new Map();\n\n  // Condition mapping: mask class ID -> engine condition\n  private mapCondition(classId: ClassId): string {\n    switch (classId) {\n      case 0: return 'rough'; // unknown -> rough\n      case 1: return 'rough'; // OB -> rough + 2 (handled by penalty)\n      case 2: return 'water'; // water (engine adds +1)\n      case 3: return 'rough'; // hazard -> rough + 1 (handled by penalty)\n      case 4: return 'sand';  // bunker -> sand\n      case 5: return 'green'; // green\n      case 6: return 'fairway'; // fairway\n      case 7: return 'recovery'; // recovery\n      case 8: return 'rough'; // rough\n      default: return 'rough';\n    }\n  }\n\n  private getPenalty(classId: ClassId): number {\n    switch (classId) {\n      case 1: return 2; // OB\n      case 3: return 1; // Hazard\n      default: return 0;\n    }\n  }\n\n  // Core calculation method - keep as black box\n  calculateExpectedStrokes(distanceYards: number, condition: string): number {\n    const cacheKey = `${distanceYards}-${condition}`;\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)!;\n    }\n\n    let expectedStrokes: number;\n\n    switch (condition) {\n      case 'green':\n        // Putting 6th-degree polynomial with range guards\n        if (distanceYards <= 50) {\n          const d = distanceYards;\n          expectedStrokes = 1.0 + \n            0.0234 * d +\n            -0.00078 * d * d +\n            0.000014 * d * d * d +\n            -0.00000012 * d * d * d * d +\n            0.0000000005 * d * d * d * d * d +\n            -0.000000000001 * d * d * d * d * d * d;\n        } else {\n          expectedStrokes = 3.2; // Linear extrapolation guard\n        }\n        break;\n\n      case 'fairway':\n        // Fairway 6th-degree + linear tails\n        if (distanceYards <= 300) {\n          const d = distanceYards;\n          expectedStrokes = 2.1 +\n            0.0089 * d +\n            -0.000034 * d * d +\n            0.00000008 * d * d * d +\n            -0.00000000009 * d * d * d * d +\n            0.00000000000005 * d * d * d * d * d +\n            -0.000000000000000012 * d * d * d * d * d * d;\n        } else {\n          // Linear tail\n          expectedStrokes = 3.8 + (distanceYards - 300) * 0.002;\n        }\n        break;\n\n      case 'sand':\n        // Bunker poly + tail slope\n        if (distanceYards <= 200) {\n          const d = distanceYards;\n          expectedStrokes = 2.8 +\n            0.012 * d +\n            -0.000045 * d * d +\n            0.00000012 * d * d * d;\n        } else {\n          expectedStrokes = 4.2 + (distanceYards - 200) * 0.003;\n        }\n        break;\n\n      case 'recovery':\n        if (distanceYards <= 250) {\n          const d = distanceYards;\n          expectedStrokes = 2.5 +\n            0.011 * d +\n            -0.000038 * d * d +\n            0.0000001 * d * d * d;\n        } else {\n          expectedStrokes = 4.0 + (distanceYards - 250) * 0.0025;\n        }\n        break;\n\n      case 'rough':\n        if (distanceYards <= 280) {\n          const d = distanceYards;\n          expectedStrokes = 2.3 +\n            0.010 * d +\n            -0.000032 * d * d +\n            0.000000085 * d * d * d;\n        } else {\n          expectedStrokes = 3.9 + (distanceYards - 280) * 0.0028;\n        }\n        break;\n\n      case 'water':\n        // Water = rough + 1 (engine adds penalty)\n        expectedStrokes = this.calculateExpectedStrokes(distanceYards, 'rough') + 1;\n        break;\n\n      default:\n        expectedStrokes = this.calculateExpectedStrokes(distanceYards, 'rough');\n    }\n\n    // Cache and return\n    this.cache.set(cacheKey, expectedStrokes);\n    return Math.max(1.0, expectedStrokes); // Ensure minimum 1 stroke\n  }\n\n  // Public method for mask-based calculations\n  calculateExpectedStrokesFromMask(distanceYards: number, classId: ClassId): number {\n    const condition = this.mapCondition(classId);\n    const baseES = this.calculateExpectedStrokes(distanceYards, condition);\n    const penalty = this.getPenalty(classId);\n    return baseES + penalty;\n  }\n\n  clearCache(): void {\n    this.cache.clear();\n  }\n}\n\n// Global instance\nexport const strokesEngine = new ExpectedStrokesEngine();\n","size_bytes":4305},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/sampling.ts":{"content":"import { LatLon, SkillPreset } from './types';\n\nexport class HaltonSampler {\n  private index: number = 0;\n\n  constructor(private base1: number = 2, private base2: number = 3) {}\n\n  private halton(index: number, base: number): number {\n    let result = 0;\n    let fraction = 1 / base;\n    let i = index;\n    \n    while (i > 0) {\n      result += (i % base) * fraction;\n      i = Math.floor(i / base);\n      fraction /= base;\n    }\n    \n    return result;\n  }\n\n  next(): [number, number] {\n    const u1 = this.halton(this.index, this.base1);\n    const u2 = this.halton(this.index, this.base2);\n    this.index++;\n    return [u1, u2];\n  }\n\n  reset(): void {\n    this.index = 0;\n  }\n}\n\nexport class UniformEllipseSampler {\n  private sampler: HaltonSampler;\n  \n  constructor(\n    private center: LatLon,\n    private semiMajor: number, // longitudinal in yards\n    private semiMinor: number, // lateral in yards\n    private bearing: number    // aim bearing in radians\n  ) {\n    this.sampler = new HaltonSampler();\n  }\n\n  // Calculate ellipse dimensions from skill and distance\n  static calculateEllipseDimensions(distance: number, skill: SkillPreset) {\n    const longitudinal = (skill.distPct / 100) * distance;\n    const lateral = distance * Math.tan(skill.offlineDeg * Math.PI / 180);\n    return { longitudinal, lateral };\n  }\n\n  // Sample uniformly within ellipse\n  samplePoint(): LatLon {\n    const [u1, u2] = this.sampler.next();\n    \n    // Uniform sampling in unit disk\n    const r = Math.sqrt(u1);\n    const theta = 2 * Math.PI * u2;\n    \n    // Transform to ellipse in local coordinates\n    const x_local = this.semiMajor * r * Math.cos(theta);\n    const y_local = this.semiMinor * r * Math.sin(theta);\n    \n    // Rotate by bearing\n    const cos_bearing = Math.cos(this.bearing);\n    const sin_bearing = Math.sin(this.bearing);\n    \n    const x_rotated = x_local * cos_bearing - y_local * sin_bearing;\n    const y_rotated = x_local * sin_bearing + y_local * cos_bearing;\n    \n    // Convert yards to approximate lat/lon offsets\n    const metersPerYard = 0.9144;\n    const latOffset = (y_rotated * metersPerYard) / 111320; // approximate\n    const lonOffset = (x_rotated * metersPerYard) / (111320 * Math.cos(this.center.lat * Math.PI / 180));\n    \n    return {\n      lat: this.center.lat + latOffset,\n      lon: this.center.lon + lonOffset\n    };\n  }\n\n  sampleBatch(count: number): LatLon[] {\n    const points: LatLon[] = [];\n    for (let i = 0; i < count; i++) {\n      points.push(this.samplePoint());\n    }\n    return points;\n  }\n\n  reset(): void {\n    this.sampler.reset();\n  }\n}\n\n// Welford's online variance algorithm for progressive confidence intervals\nexport class ProgressiveStats {\n  private count = 0;\n  private mean = 0;\n  private m2 = 0;\n\n  add(value: number): void {\n    this.count++;\n    const delta = value - this.mean;\n    this.mean += delta / this.count;\n    const delta2 = value - this.mean;\n    this.m2 += delta * delta2;\n  }\n\n  getMean(): number {\n    return this.mean;\n  }\n\n  getVariance(): number {\n    return this.count < 2 ? 0 : this.m2 / (this.count - 1);\n  }\n\n  getStandardError(): number {\n    return Math.sqrt(this.getVariance() / this.count);\n  }\n\n  getConfidenceInterval95(): number {\n    // 95% CI = ±1.96 * SE\n    return 1.96 * this.getStandardError();\n  }\n\n  getCount(): number {\n    return this.count;\n  }\n\n  reset(): void {\n    this.count = 0;\n    this.mean = 0;\n    this.m2 = 0;\n  }\n}\n","size_bytes":3426},"client/src/lib/types.ts":{"content":"export type LatLon = { lat: number; lon: number };\n\nexport type SkillPreset = {\n  name: 'Pro'|'Elite Am'|'Good'|'Average'|'Bad'|'Terrible'|string;\n  offlineDeg: number;   // e.g., 5.9\n  distPct: number;      // e.g., 4.7  (± long/short as % of shot length)\n};\n\nexport type MaskMeta = {\n  url: string; width: number; height: number; // pixels\n  bbox: { west: number; south: number; east: number; north: number };\n  paletteVersion: number; // class IDs stable across versions\n};\n\nexport type ClassId = 0|1|2|3|4|5|6|7|8; // unknown, OB, Water, Hazard, Bunker, Green, Fairway, Recovery, Rough\n\nexport type ESResult = { mean: number; ci95: number; n: number; countsByClass: Record<ClassId, number> };\n\nexport type AimCandidate = { aim: LatLon; es: ESResult; distanceYds: number };\n\nexport type PrepareState = {\n  courseId: string | null;\n  holeId: string | null;\n  currentHole: number;\n  bounds: any;\n  viewBookmarks: any;\n  mergedFeaturesVersion: number;\n  maskPngMeta: MaskMeta | null;\n  slopePngMeta: MaskMeta | null;\n  start: LatLon | null;\n  pin: LatLon | null;\n  aim: LatLon | null;\n  skillPreset: SkillPreset;\n  maxCarry: number;\n  photorealEnabled: boolean;\n};\n\nexport type PrepareEvent = \n  | { type: 'COURSE_LOADED'; payload: { courseId: string } }\n  | { type: 'HOLE_CHANGED'; payload: { holeId: string; holeNumber: number } }\n  | { type: 'VIEW_PRESET_SELECTED'; payload: { preset: string } }\n  | { type: 'POINT_SET'; payload: { type: 'start'|'aim'|'pin'; point: LatLon } }\n  | { type: 'SKILL_CHANGED'; payload: { skill: SkillPreset } }\n  | { type: 'SAMPLES_UPDATED'; payload: ESResult }\n  | { type: 'OPTIMIZER_RESULT'; payload: { candidates: AimCandidate[] } }\n  | { type: 'POLYGONS_CHANGED'; payload: { polygons: any[] } };\n\nexport const SKILL_PRESETS: SkillPreset[] = [\n  { name: 'Pro', offlineDeg: 2.5, distPct: 3.0 },\n  { name: 'Elite Am', offlineDeg: 3.8, distPct: 4.2 },\n  { name: 'Good', offlineDeg: 5.2, distPct: 5.8 },\n  { name: 'Average', offlineDeg: 7.1, distPct: 7.5 },\n  { name: 'Bad', offlineDeg: 9.8, distPct: 9.2 },\n  { name: 'Terrible', offlineDeg: 12.5, distPct: 11.8 },\n];\n\nexport const CONDITION_COLORS = {\n  unknown: '#9CA3AF',\n  ob: '#DC2626',\n  water: '#2563EB', \n  hazard: '#EF4444',\n  bunker: '#FDE047',\n  green: '#22C55E',\n  fairway: '#84CC16',\n  recovery: '#A3A3A3',\n  rough: '#6B7280',\n};\n","size_bytes":2325},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport CoursePicker from '../components/prepare/CoursePicker';\nimport HoleNavigator from '../components/prepare/HoleNavigator';\nimport CesiumCanvas from '../components/prepare/CesiumCanvas';\nimport ConditionDrawer from '../components/prepare/ConditionDrawer';\nimport AimPanel from '../components/prepare/AimPanel';\nimport DispersionInspector from '../components/prepare/DispersionInspector';\nimport OptimizerPanel from '../components/prepare/OptimizerPanel';\nimport MetricsBar from '../components/prepare/MetricsBar';\nimport PlayTab from '../components/placeholders/PlayTab';\nimport StatsTab from '../components/placeholders/StatsTab';\nimport TrendsTab from '../components/placeholders/TrendsTab';\nimport DispersionTab from '../components/placeholders/DispersionTab';\nimport { usePrepareState } from '../hooks/usePrepareState';\n\nexport default function Dashboard() {\n  const [activeTab, setActiveTab] = useState('prepare');\n  const { state, dispatch, setPoint, changeHole, setSkill } = usePrepareState();\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-slate-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-golf-ball text-primary text-xl\"></i>\n                <h1 className=\"text-xl font-bold text-secondary\">Golf Analytics Pro</h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\">\n                <i className=\"fas fa-bell text-lg\"></i>\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\">\n                <i className=\"fas fa-cog text-lg\"></i>\n              </Button>\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-user text-white text-sm\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-5 bg-transparent h-auto p-0\">\n              <TabsTrigger \n                value=\"prepare\" \n                className=\"tab-button flex items-center justify-center whitespace-nowrap py-4 px-1 border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:text-primary font-medium text-sm\"\n              >\n                <i className=\"fas fa-map-marked-alt mr-2\"></i>Prepare\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"play\"\n                className=\"tab-button flex items-center justify-center whitespace-nowrap py-4 px-1 border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:text-primary font-medium text-sm\"\n              >\n                <i className=\"fas fa-play mr-2\"></i>Play\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"stats\"\n                className=\"tab-button flex items-center justify-center whitespace-nowrap py-4 px-1 border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:text-primary font-medium text-sm\"\n              >\n                <i className=\"fas fa-chart-bar mr-2\"></i>Stats\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"trends\"\n                className=\"tab-button flex items-center justify-center whitespace-nowrap py-4 px-1 border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:text-primary font-medium text-sm\"\n              >\n                <i className=\"fas fa-chart-line mr-2\"></i>Trends\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"dispersion\"\n                className=\"tab-button flex items-center justify-center whitespace-nowrap py-4 px-1 border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:text-primary font-medium text-sm\"\n              >\n                <i className=\"fas fa-bullseye mr-2\"></i>Dispersion\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Main Content */}\n            <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n              <TabsContent value=\"prepare\" className=\"mt-0\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mobile-stack\">\n                  {/* Left Sidebar */}\n                  <div className=\"lg:col-span-1 space-y-6\">\n                    <CoursePicker \n                      selectedCourseId={state.courseId} \n                      onCourseSelect={(courseId) => dispatch({ type: 'COURSE_LOADED', payload: { courseId } })} \n                    />\n                    <HoleNavigator \n                      currentHole={state.currentHole} \n                      onHoleChange={changeHole} \n                    />\n                    <ConditionDrawer />\n                  </div>\n\n                  {/* Center - 3D Canvas */}\n                  <div className=\"lg:col-span-2\">\n                    <CesiumCanvas \n                      state={state}\n                      onPointSet={setPoint}\n                    />\n                    <MetricsBar state={state} />\n                  </div>\n\n                  {/* Right Sidebar */}\n                  <div className=\"lg:col-span-1 space-y-6\">\n                    <AimPanel \n                      state={state}\n                      onPointSet={setPoint}\n                      onSkillChange={setSkill}\n                    />\n                    <DispersionInspector state={state} />\n                    <OptimizerPanel state={state} />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"play\" className=\"mt-0\">\n                <PlayTab />\n              </TabsContent>\n\n              <TabsContent value=\"stats\" className=\"mt-0\">\n                <StatsTab />\n              </TabsContent>\n\n              <TabsContent value=\"trends\" className=\"mt-0\">\n                <TrendsTab />\n              </TabsContent>\n\n              <TabsContent value=\"dispersion\" className=\"mt-0\">\n                <DispersionTab />\n              </TabsContent>\n            </main>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6833},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/workers/esWorker.ts":{"content":"// Expected Strokes Worker - handles batch processing of ES calculations\nimport { strokesEngine } from '../lib/expectedStrokes';\nimport { ClassId, LatLon, ESResult } from '../lib/types';\nimport { ProgressiveStats } from '../lib/sampling';\n\ninterface WorkerMessage {\n  type: 'BATCH_ES' | 'RESET';\n  payload?: {\n    points: LatLon[];\n    distances: number[];\n    classIds: ClassId[];\n  };\n}\n\ninterface WorkerResponse {\n  type: 'BATCH_ES_RESULT' | 'ERROR';\n  payload?: ESResult | { message: string };\n}\n\nconst progressiveStats = new ProgressiveStats();\nconst conditionCounts: Record<ClassId, number> = {\n  0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0\n};\n\nself.onmessage = function(e: MessageEvent<WorkerMessage>) {\n  const { type, payload } = e.data;\n\n  try {\n    switch (type) {\n      case 'BATCH_ES':\n        if (!payload) {\n          throw new Error('Missing payload for BATCH_ES');\n        }\n\n        const { points, distances, classIds } = payload;\n        \n        // Process batch\n        for (let i = 0; i < points.length; i++) {\n          const distance = distances[i];\n          const classId = classIds[i];\n          \n          // Calculate Expected Strokes\n          const es = strokesEngine.calculateExpectedStrokesFromMask(distance, classId);\n          \n          // Update progressive statistics\n          progressiveStats.add(es);\n          conditionCounts[classId]++;\n        }\n\n        // Return updated results\n        const result: ESResult = {\n          mean: progressiveStats.getMean(),\n          ci95: progressiveStats.getConfidenceInterval95(),\n          n: progressiveStats.getCount(),\n          countsByClass: { ...conditionCounts }\n        };\n\n        self.postMessage({\n          type: 'BATCH_ES_RESULT',\n          payload: result\n        } as WorkerResponse);\n        break;\n\n      case 'RESET':\n        progressiveStats.reset();\n        Object.keys(conditionCounts).forEach(key => {\n          conditionCounts[key as unknown as ClassId] = 0;\n        });\n        break;\n\n      default:\n        throw new Error(`Unknown message type: ${type}`);\n    }\n  } catch (error) {\n    self.postMessage({\n      type: 'ERROR',\n      payload: { message: error instanceof Error ? error.message : 'Unknown error' }\n    } as WorkerResponse);\n  }\n};\n\nexport {}; // Make this a module\n","size_bytes":2299},"client/src/workers/optimizerWorker.ts":{"content":"// Aim Optimizer Worker - implements CEM algorithm with geometric pruning\nimport { LatLon, AimCandidate, SkillPreset, ESResult } from '../lib/types';\nimport { UniformEllipseSampler } from '../lib/sampling';\n\ninterface OptimizerMessage {\n  type: 'OPTIMIZE' | 'CANCEL';\n  payload?: {\n    start: LatLon;\n    pin: LatLon;\n    skill: SkillPreset;\n    maxCarry: number;\n    tolerance: number;\n  };\n}\n\ninterface OptimizerResponse {\n  type: 'OPTIMIZATION_RESULT' | 'OPTIMIZATION_PROGRESS' | 'ERROR';\n  payload?: {\n    candidates?: AimCandidate[];\n    progress?: number;\n    iteration?: number;\n    message?: string;\n  };\n}\n\nlet cancelled = false;\n\n// CEM Parameters\nconst CEM_ITERATIONS = 8;\nconst CEM_SAMPLES = 128;\nconst CEM_ELITE_RATIO = 0.15;\nconst CEM_SIGMA_FLOOR_DISTANCE = 5; // yards\nconst CEM_SIGMA_FLOOR_BEARING = 3 * Math.PI / 180; // 3 degrees\n\nself.onmessage = function(e: MessageEvent<OptimizerMessage>) {\n  const { type, payload } = e.data;\n\n  try {\n    switch (type) {\n      case 'OPTIMIZE':\n        if (!payload) {\n          throw new Error('Missing payload for OPTIMIZE');\n        }\n        cancelled = false;\n        optimizeAim(payload);\n        break;\n\n      case 'CANCEL':\n        cancelled = true;\n        break;\n\n      default:\n        throw new Error(`Unknown message type: ${type}`);\n    }\n  } catch (error) {\n    self.postMessage({\n      type: 'ERROR',\n      payload: { message: error instanceof Error ? error.message : 'Unknown error' }\n    } as OptimizerResponse);\n  }\n};\n\nasync function optimizeAim(params: {\n  start: LatLon;\n  pin: LatLon;\n  skill: SkillPreset;\n  maxCarry: number;\n  tolerance: number;\n}) {\n  const { start, pin, skill, maxCarry, tolerance } = params;\n\n  // Calculate total distance\n  const totalDistance = calculateDistance(start, pin);\n  const bearing = calculateBearing(start, pin);\n\n  // Initialize CEM distribution (r, theta) relative to direct line\n  let meanR = Math.min(maxCarry * 0.9, totalDistance * 0.9); // Conservative initial aim distance\n  let meanTheta = 0; // Start aiming directly at pin\n  let sigmaR = 50; // yards\n  let sigmaTheta = 15 * Math.PI / 180; // 15 degrees\n\n  let bestCandidates: AimCandidate[] = [];\n\n  for (let iter = 0; iter < CEM_ITERATIONS && !cancelled; iter++) {\n    // Generate candidate aim points\n    const candidates: LatLon[] = [];\n    for (let i = 0; i < CEM_SAMPLES; i++) {\n      const r = Math.max(50, Math.min(maxCarry, normalRandom(meanR, sigmaR)));\n      const theta = normalRandom(meanTheta, sigmaTheta);\n      \n      // Convert polar to Cartesian relative to start\n      const aimBearing = bearing + theta;\n      const aim = projectPoint(start, r, aimBearing);\n      candidates.push(aim);\n    }\n\n    // Evaluate candidates (simplified for demo - in real implementation would use ES worker)\n    const evaluatedCandidates: AimCandidate[] = [];\n    for (const aim of candidates) {\n      const distance = calculateDistance(start, aim);\n      \n      // Mock ES calculation (in real implementation, this would call ES worker)\n      const mockES: ESResult = {\n        mean: 3.5 + Math.random() * 0.5 + (distance > maxCarry ? 1.0 : 0),\n        ci95: 0.02 + Math.random() * 0.02,\n        n: 1000,\n        countsByClass: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 100, 6: 800, 7: 100, 8: 0 }\n      };\n\n      evaluatedCandidates.push({\n        aim,\n        es: mockES,\n        distanceYds: distance\n      });\n    }\n\n    // Sort by Expected Strokes (lower is better)\n    evaluatedCandidates.sort((a, b) => a.es.mean - b.es.mean);\n\n    // Keep elite samples\n    const eliteCount = Math.ceil(CEM_SAMPLES * CEM_ELITE_RATIO);\n    const elites = evaluatedCandidates.slice(0, eliteCount);\n    \n    // Update best candidates\n    if (iter === 0 || elites[0].es.mean < bestCandidates[0].es.mean) {\n      bestCandidates = elites.slice(0, 3); // Keep top 3\n    }\n\n    // Refit distribution\n    if (elites.length > 1) {\n      const eliteR = elites.map(e => calculateDistance(start, e.aim));\n      const eliteTheta = elites.map(e => {\n        const candBearing = calculateBearing(start, e.aim);\n        return normalizeAngle(candBearing - bearing);\n      });\n\n      meanR = eliteR.reduce((sum, r) => sum + r, 0) / elites.length;\n      meanTheta = eliteTheta.reduce((sum, t) => sum + t, 0) / elites.length;\n\n      sigmaR = Math.max(CEM_SIGMA_FLOOR_DISTANCE, \n        Math.sqrt(eliteR.reduce((sum, r) => sum + (r - meanR) ** 2, 0) / (elites.length - 1)));\n      sigmaTheta = Math.max(CEM_SIGMA_FLOOR_BEARING,\n        Math.sqrt(eliteTheta.reduce((sum, t) => sum + (t - meanTheta) ** 2, 0) / (elites.length - 1)));\n    }\n\n    // Report progress\n    self.postMessage({\n      type: 'OPTIMIZATION_PROGRESS',\n      payload: {\n        progress: ((iter + 1) / CEM_ITERATIONS) * 100,\n        iteration: iter + 1\n      }\n    } as OptimizerResponse);\n\n    // Small delay to prevent blocking\n    await new Promise(resolve => setTimeout(resolve, 10));\n  }\n\n  if (!cancelled) {\n    // Final result\n    self.postMessage({\n      type: 'OPTIMIZATION_RESULT',\n      payload: { candidates: bestCandidates }\n    } as OptimizerResponse);\n  }\n}\n\n// Utility functions\nfunction calculateDistance(p1: LatLon, p2: LatLon): number {\n  const R = 6371000; // Earth radius in meters\n  const dLat = (p2.lat - p1.lat) * Math.PI / 180;\n  const dLon = (p2.lon - p1.lon) * Math.PI / 180;\n  const a = Math.sin(dLat/2) ** 2 + Math.cos(p1.lat * Math.PI/180) * Math.cos(p2.lat * Math.PI/180) * Math.sin(dLon/2) ** 2;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c * 1.09361; // Convert to yards\n}\n\nfunction calculateBearing(p1: LatLon, p2: LatLon): number {\n  const dLon = (p2.lon - p1.lon) * Math.PI / 180;\n  const lat1 = p1.lat * Math.PI / 180;\n  const lat2 = p2.lat * Math.PI / 180;\n  \n  const y = Math.sin(dLon) * Math.cos(lat2);\n  const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);\n  \n  return Math.atan2(y, x);\n}\n\nfunction projectPoint(start: LatLon, distance: number, bearing: number): LatLon {\n  const R = 6371000; // Earth radius in meters\n  const d = distance * 0.9144; // yards to meters\n  \n  const lat1 = start.lat * Math.PI / 180;\n  const lon1 = start.lon * Math.PI / 180;\n  \n  const lat2 = Math.asin(Math.sin(lat1) * Math.cos(d/R) + Math.cos(lat1) * Math.sin(d/R) * Math.cos(bearing));\n  const lon2 = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(d/R) * Math.cos(lat1), Math.cos(d/R) - Math.sin(lat1) * Math.sin(lat2));\n  \n  return {\n    lat: lat2 * 180 / Math.PI,\n    lon: lon2 * 180 / Math.PI\n  };\n}\n\nfunction normalRandom(mean: number, sigma: number): number {\n  // Box-Muller transform\n  const u1 = Math.random();\n  const u2 = Math.random();\n  const z = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n  return mean + sigma * z;\n}\n\nfunction normalizeAngle(angle: number): number {\n  while (angle > Math.PI) angle -= 2 * Math.PI;\n  while (angle < -Math.PI) angle += 2 * Math.PI;\n  return angle;\n}\n\nexport {};\n","size_bytes":6923},"client/src/components/placeholders/DispersionTab.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\n\nexport default function DispersionTab() {\n  const analysisFeatures = [\n    {\n      title: 'Shot Pattern Analysis',\n      description: 'Comprehensive analysis of your shot dispersion patterns',\n      visual: 'Heat Map Visualization',\n      gradient: 'from-blue-100 to-green-100 dark:from-blue-900/30 dark:to-green-900/30'\n    },\n    {\n      title: 'Confidence Ellipses',\n      description: 'Statistical confidence intervals for shot placement',\n      visual: 'Statistical Models',\n      gradient: 'from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30'\n    },\n    {\n      title: 'Club-Specific Patterns',\n      description: 'Individual dispersion analysis for each club in your bag',\n      visual: 'Club Comparison',\n      gradient: 'from-green-100 to-yellow-100 dark:from-green-900/30 dark:to-yellow-900/30'\n    },\n    {\n      title: 'Environmental Factors',\n      description: 'How wind, weather, and course conditions affect dispersion',\n      visual: 'Condition Analysis',\n      gradient: 'from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30'\n    }\n  ];\n\n  const dispersionMetrics = [\n    {\n      metric: 'Circular Error Probable',\n      description: 'CEP radius containing 50% of shots',\n      icon: 'fas fa-circle-dot',\n      value: '8.3 yds'\n    },\n    {\n      metric: 'Standard Deviation',\n      description: 'Statistical spread measurement',\n      icon: 'fas fa-chart-simple',\n      value: '±6.2 yds'\n    },\n    {\n      metric: 'Bivariate Normal',\n      description: 'Two-dimensional distribution fit',\n      icon: 'fas fa-gaussian',\n      value: 'R² = 0.94'\n    },\n    {\n      metric: 'Miss Direction',\n      description: 'Primary direction of missed shots',\n      icon: 'fas fa-compass',\n      value: '3° right'\n    }\n  ];\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <div className=\"text-center mb-8\">\n          <i className=\"fas fa-bullseye text-4xl text-gray-300 mb-4\"></i>\n          <h2 className=\"text-2xl font-bold text-gray-400 mb-2\">Dispersion Analysis</h2>\n          <p className=\"text-gray-500 max-w-2xl mx-auto\">\n            Advanced shot dispersion analysis and modeling. \n            Understand your shot patterns with statistical analysis, confidence intervals, and predictive modeling.\n          </p>\n        </div>\n\n        {/* Analysis Visualizations */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {analysisFeatures.map((feature, index) => (\n            <div key={index} className=\"p-6 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n              <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-2\">{feature.title}</h3>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">{feature.description}</p>\n              <div className={`w-full h-32 bg-gradient-to-br ${feature.gradient} rounded flex items-center justify-center`}>\n                <span className=\"text-gray-500 dark:text-gray-400 text-sm font-medium\">{feature.visual}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Dispersion Metrics */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4 text-center\">Statistical Metrics</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {dispersionMetrics.map((metric, index) => (\n              <div key={index} className=\"p-4 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 text-center\">\n                <i className={`${metric.icon} text-2xl text-primary mb-3`}></i>\n                <h4 className=\"font-medium text-gray-700 dark:text-gray-300 text-sm mb-1\">{metric.metric}</h4>\n                <p className=\"text-lg font-bold text-primary mb-2\">{metric.value}</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">{metric.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Advanced Features */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 text-center\">\n            <i className=\"fas fa-chart-scatter text-2xl text-blue-500 mb-3\"></i>\n            <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-2\">3D Visualization</h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">Three-dimensional shot pattern analysis</p>\n          </div>\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 text-center\">\n            <i className=\"fas fa-brain text-2xl text-purple-500 mb-3\"></i>\n            <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-2\">ML Predictions</h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">Machine learning shot prediction models</p>\n          </div>\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 text-center\">\n            <i className=\"fas fa-sliders-h text-2xl text-green-500 mb-3\"></i>\n            <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-2\">Custom Filters</h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">Filter by conditions, clubs, and distances</p>\n          </div>\n        </div>\n\n        {/* Main Feature Highlight */}\n        <div className=\"p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-shrink-0\">\n              <i className=\"fas fa-chart-area text-3xl text-blue-600 dark:text-blue-400\"></i>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-1\">Advanced Dispersion Modeling</h4>\n              <p className=\"text-blue-700 dark:text-blue-300 text-sm\">\n                Sophisticated statistical analysis combining Monte Carlo simulation, bivariate normal distributions, \n                and machine learning to model your shot patterns with unprecedented accuracy.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6462},"client/src/components/placeholders/PlayTab.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\n\nexport default function PlayTab() {\n  const features = [\n    {\n      icon: 'fas fa-crosshairs',\n      title: 'Shot Tracker',\n      description: 'Real-time shot tracking with GPS precision'\n    },\n    {\n      icon: 'fas fa-stopwatch',\n      title: 'Live Timing',\n      description: 'Pace of play monitoring and timing'\n    },\n    {\n      icon: 'fas fa-clipboard-list',\n      title: 'Digital Scorecard',\n      description: 'Interactive scorecard with statistics'\n    },\n    {\n      icon: 'fas fa-wind',\n      title: 'Weather Conditions',\n      description: 'Real-time weather and wind data'\n    },\n    {\n      icon: 'fas fa-route',\n      title: 'Course Navigation',\n      description: 'Turn-by-turn course navigation'\n    },\n    {\n      icon: 'fas fa-users',\n      title: 'Group Management',\n      description: 'Multi-player round coordination'\n    }\n  ];\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <div className=\"text-center mb-8\">\n          <i className=\"fas fa-play text-4xl text-gray-300 mb-4\"></i>\n          <h2 className=\"text-2xl font-bold text-gray-400 mb-2\">Play Tab</h2>\n          <p className=\"text-gray-500 max-w-2xl mx-auto\">\n            Real-time shot tracking, game management tools, and live round analytics. \n            Track your performance as you play with GPS-enabled shot detection and automatic scoring.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n              <div className=\"text-center\">\n                <i className={`${feature.icon} text-2xl text-gray-400 mb-3`}></i>\n                <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-2\">{feature.title}</h3>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">{feature.description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-8 p-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <div className=\"flex items-center space-x-3\">\n            <i className=\"fas fa-info-circle text-blue-600 dark:text-blue-400\"></i>\n            <div>\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Coming Soon</h4>\n              <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                Live round tracking with automatic shot detection, real-time scoring, and performance analytics during play.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2781},"client/src/components/placeholders/StatsTab.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\n\nexport default function StatsTab() {\n  const chartPlaceholders = [\n    {\n      title: 'Scoring Average',\n      description: 'Track your scoring trends over time',\n      image: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400',\n      alt: 'Golf analytics dashboard with scoring charts and performance metrics'\n    },\n    {\n      title: 'Performance Metrics',\n      description: 'Detailed analysis of your game statistics',\n      image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400',\n      alt: 'Golf performance analytics dashboard showing various charts and graphs'\n    }\n  ];\n\n  const statCategories = [\n    {\n      icon: 'fas fa-flag',\n      title: 'Scoring',\n      stats: ['Average Score', 'Birdies', 'Eagles', 'Pars', 'Bogeys']\n    },\n    {\n      icon: 'fas fa-bullseye',\n      title: 'Accuracy',\n      stats: ['Fairways Hit', 'Greens in Regulation', 'Up & Down %', 'Sand Saves']\n    },\n    {\n      icon: 'fas fa-golf-ball',\n      title: 'Distance',\n      stats: ['Drive Distance', 'Approach Accuracy', 'Putting Average', 'Total Distance']\n    },\n    {\n      icon: 'fas fa-chart-line',\n      title: 'Trends',\n      stats: ['Handicap History', 'Recent Form', 'Course Performance', 'Weather Impact']\n    }\n  ];\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <div className=\"text-center mb-8\">\n          <i className=\"fas fa-chart-bar text-4xl text-gray-300 mb-4\"></i>\n          <h2 className=\"text-2xl font-bold text-gray-400 mb-2\">Statistics Tab</h2>\n          <p className=\"text-gray-500 max-w-2xl mx-auto\">\n            Comprehensive performance analytics and detailed metrics tracking. \n            Analyze your game with advanced statistics, trends, and comparative analysis.\n          </p>\n        </div>\n\n        {/* Chart Previews */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {chartPlaceholders.map((chart, index) => (\n            <div key={index} className=\"relative\">\n              <img \n                src={chart.image} \n                alt={chart.alt}\n                className=\"w-full h-48 object-cover rounded-lg shadow-sm border border-slate-200 dark:border-slate-700\"\n              />\n              <div className=\"absolute inset-0 bg-black bg-opacity-40 rounded-lg flex items-center justify-center\">\n                <div className=\"text-center text-white\">\n                  <h3 className=\"font-semibold text-lg mb-2\">{chart.title}</h3>\n                  <p className=\"text-sm opacity-90\">{chart.description}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Statistics Categories */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n          {statCategories.map((category, index) => (\n            <div key={index} className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n              <div className=\"text-center mb-4\">\n                <i className={`${category.icon} text-2xl text-primary mb-2`}></i>\n                <h3 className=\"font-medium text-gray-700 dark:text-gray-300\">{category.title}</h3>\n              </div>\n              <ul className=\"space-y-1\">\n                {category.stats.map((stat, statIndex) => (\n                  <li key={statIndex} className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n                    {stat}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"p-6 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n          <div className=\"flex items-center space-x-3\">\n            <i className=\"fas fa-chart-bar text-green-600 dark:text-green-400\"></i>\n            <div>\n              <h4 className=\"font-medium text-green-900 dark:text-green-100\">Advanced Analytics</h4>\n              <p className=\"text-sm text-green-700 dark:text-green-300\">\n                Detailed performance tracking with strokes gained analysis, course-specific statistics, and predictive modeling for game improvement.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4379},"client/src/components/placeholders/TrendsTab.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\n\nexport default function TrendsTab() {\n  const trendFeatures = [\n    {\n      icon: 'fas fa-arrow-trend-up',\n      title: 'Performance Trends',\n      description: 'Track improvement over time with detailed trend analysis',\n      color: 'text-green-500'\n    },\n    {\n      icon: 'fas fa-calendar-alt',\n      title: 'Historical Data',\n      description: 'Comprehensive historical performance data and insights',\n      color: 'text-blue-500'\n    },\n    {\n      icon: 'fas fa-bullseye',\n      title: 'Goal Tracking',\n      description: 'Set and monitor progress toward your golf improvement goals',\n      color: 'text-purple-500'\n    },\n    {\n      icon: 'fas fa-trophy',\n      title: 'Achievements',\n      description: 'Track milestones, personal bests, and breakthrough moments',\n      color: 'text-yellow-500'\n    },\n    {\n      icon: 'fas fa-weather-sun',\n      title: 'Condition Analysis',\n      description: 'Performance correlation with weather and course conditions',\n      color: 'text-orange-500'\n    },\n    {\n      icon: 'fas fa-users',\n      title: 'Peer Comparison',\n      description: 'Compare your trends against similar skill level players',\n      color: 'text-indigo-500'\n    }\n  ];\n\n  const trendTypes = [\n    {\n      title: 'Short-term Trends',\n      period: 'Last 30 days',\n      description: 'Recent performance changes and immediate areas for improvement',\n      bgColor: 'bg-blue-50 dark:bg-blue-900/20',\n      borderColor: 'border-blue-200 dark:border-blue-800',\n      textColor: 'text-blue-700 dark:text-blue-300'\n    },\n    {\n      title: 'Seasonal Analysis',\n      period: 'Current season',\n      description: 'Performance evolution throughout the golf season',\n      bgColor: 'bg-green-50 dark:bg-green-900/20',\n      borderColor: 'border-green-200 dark:border-green-800',\n      textColor: 'text-green-700 dark:text-green-300'\n    },\n    {\n      title: 'Long-term Progress',\n      period: 'Year over year',\n      description: 'Multi-year improvement tracking and handicap development',\n      bgColor: 'bg-purple-50 dark:bg-purple-900/20',\n      borderColor: 'border-purple-200 dark:border-purple-800',\n      textColor: 'text-purple-700 dark:text-purple-300'\n    }\n  ];\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <div className=\"text-center mb-8\">\n          <i className=\"fas fa-chart-line text-4xl text-gray-300 mb-4\"></i>\n          <h2 className=\"text-2xl font-bold text-gray-400 mb-2\">Trends Tab</h2>\n          <p className=\"text-gray-500 max-w-2xl mx-auto\">\n            Long-term performance trends and improvement tracking. \n            Analyze your golf journey with comprehensive trend analysis and predictive insights.\n          </p>\n        </div>\n\n        {/* Trend Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n          {trendFeatures.map((feature, index) => (\n            <div key={index} className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n              <div className=\"text-center\">\n                <i className={`${feature.icon} text-2xl ${feature.color} mb-3`}></i>\n                <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-2\">{feature.title}</h3>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">{feature.description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Trend Analysis Types */}\n        <div className=\"space-y-4 mb-8\">\n          <h3 className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 text-center\">Analysis Timeframes</h3>\n          {trendTypes.map((trend, index) => (\n            <div key={index} className={`p-4 rounded-lg border ${trend.bgColor} ${trend.borderColor}`}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className={`font-medium ${trend.textColor}`}>{trend.title}</h4>\n                <span className={`text-sm ${trend.textColor} opacity-75`}>{trend.period}</span>\n              </div>\n              <p className={`text-sm ${trend.textColor} opacity-90`}>{trend.description}</p>\n            </div>\n          ))}\n        </div>\n\n        {/* Visualization Preview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <div className=\"p-6 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n            <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-4 text-center\">Handicap Progression</h3>\n            <div className=\"w-full h-32 bg-gradient-to-r from-blue-100 to-green-100 dark:from-blue-900/30 dark:to-green-900/30 rounded flex items-center justify-center\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-chart-line text-3xl text-gray-400 mb-2\"></i>\n                <span className=\"text-gray-500 text-sm\">Trend Line Visualization</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"p-6 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n            <h3 className=\"font-medium text-gray-600 dark:text-gray-300 mb-4 text-center\">Performance Heatmap</h3>\n            <div className=\"w-full h-32 bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 rounded flex items-center justify-center\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-th text-3xl text-gray-400 mb-2\"></i>\n                <span className=\"text-gray-500 text-sm\">Heat Map Analysis</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg border border-indigo-200 dark:border-indigo-800\">\n          <div className=\"flex items-center space-x-3\">\n            <i className=\"fas fa-lightbulb text-indigo-600 dark:text-indigo-400\"></i>\n            <div>\n              <h4 className=\"font-medium text-indigo-900 dark:text-indigo-100\">Predictive Analytics</h4>\n              <p className=\"text-sm text-indigo-700 dark:text-indigo-300\">\n                AI-powered trend analysis with predictive modeling to forecast performance improvements and identify optimal practice areas.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6402},"client/src/components/prepare/AimPanel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { PrepareState, LatLon, SKILL_PRESETS } from '../../lib/types';\n\ninterface AimPanelProps {\n  state: PrepareState;\n  onPointSet: (type: 'start' | 'aim' | 'pin', point: LatLon) => void;\n  onSkillChange: (skill: typeof SKILL_PRESETS[0]) => void;\n}\n\nexport default function AimPanel({ state, onPointSet, onSkillChange }: AimPanelProps) {\n  const formatCoordinate = (point: LatLon | null) => {\n    if (!point) return 'Not set';\n    return `${point.lat.toFixed(4)}°N, ${Math.abs(point.lon).toFixed(4)}°${point.lon >= 0 ? 'E' : 'W'}`;\n  };\n\n  const getPointDescription = (type: 'start' | 'aim' | 'pin') => {\n    switch (type) {\n      case 'start':\n        return state.start ? 'Championship Tee' : 'Not set';\n      case 'aim':\n        return state.aim ? 'Fairway Center' : 'Not set';\n      case 'pin':\n        return state.pin ? 'Back Right' : 'Not set';\n      default:\n        return 'Not set';\n    }\n  };\n\n  const handleMaxCarryChange = (value: string) => {\n    // TODO: Implement max carry change\n    console.log('Max carry changed to:', value);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-secondary\">Shot Setup</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Point Pickers */}\n        <div className=\"space-y-4\">\n          {/* Start Position */}\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2\">Start Position</Label>\n            <Button\n              variant=\"outline\"\n              className=\"w-full p-3 h-auto text-left justify-start hover:bg-slate-50 transition-colors\"\n              onClick={() => {\n                // TODO: Implement point selection UI\n                console.log('Select start position');\n              }}\n            >\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full mt-1\" />\n                <div className=\"flex-1 min-w-0\">\n                  <span className=\"text-sm block\">{getPointDescription('start')}</span>\n                  <p className=\"text-xs text-gray-500 mt-1 truncate\">\n                    {formatCoordinate(state.start)}\n                  </p>\n                </div>\n              </div>\n            </Button>\n          </div>\n\n          {/* Aim Point */}\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2\">Aim Point</Label>\n            <Button\n              variant=\"outline\"\n              className={`w-full p-3 h-auto text-left justify-start transition-colors ${\n                state.aim ? 'border-primary bg-primary/5' : 'hover:bg-slate-50'\n              }`}\n              onClick={() => {\n                // TODO: Implement point selection UI\n                console.log('Select aim position');\n              }}\n            >\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full mt-1\" />\n                <div className=\"flex-1 min-w-0\">\n                  <span className=\"text-sm block\">{getPointDescription('aim')}</span>\n                  <p className=\"text-xs text-gray-500 mt-1 truncate\">\n                    {formatCoordinate(state.aim)}\n                  </p>\n                </div>\n              </div>\n            </Button>\n          </div>\n\n          {/* Pin Position */}\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2\">Pin Position</Label>\n            <Button\n              variant=\"outline\"\n              className=\"w-full p-3 h-auto text-left justify-start hover:bg-slate-50 transition-colors\"\n              onClick={() => {\n                // TODO: Implement point selection UI\n                console.log('Select pin position');\n              }}\n            >\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full mt-1\" />\n                <div className=\"flex-1 min-w-0\">\n                  <span className=\"text-sm block\">{getPointDescription('pin')}</span>\n                  <p className=\"text-xs text-gray-500 mt-1 truncate\">\n                    {formatCoordinate(state.pin)}\n                  </p>\n                </div>\n              </div>\n            </Button>\n          </div>\n        </div>\n\n        {/* Skill Selector */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Skill Level</Label>\n          <Select\n            value={state.skillPreset.name}\n            onValueChange={(value) => {\n              const skill = SKILL_PRESETS.find(s => s.name === value);\n              if (skill) {\n                onSkillChange(skill);\n              }\n            }}\n          >\n            <SelectTrigger className=\"w-full\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {SKILL_PRESETS.map((preset) => (\n                <SelectItem key={preset.name} value={preset.name}>\n                  {preset.name} (±{preset.offlineDeg}° / ±{preset.distPct}%)\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Max Carry */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Max Carry (yards)</Label>\n          <Input\n            type=\"number\"\n            value={state.maxCarry}\n            onChange={(e) => handleMaxCarryChange(e.target.value)}\n            className=\"w-full\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5850},"client/src/components/prepare/CesiumCanvas.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { PrepareState, LatLon } from '../../lib/types';\n\ninterface CesiumCanvasProps {\n  state: PrepareState;\n  onPointSet: (type: 'start' | 'aim' | 'pin', point: LatLon) => void;\n}\n\nexport default function CesiumCanvas({ state, onPointSet }: CesiumCanvasProps) {\n  const viewerRef = useRef<any>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [viewerReady, setViewerReady] = useState(false);\n  const [layersVisible, setLayersVisible] = useState(true);\n  const [slopeArrows, setSlopeArrows] = useState(false);\n  const [photorealEnabled, setPhotorealEnabled] = useState(false);\n\n  // Initialize Cesium viewer\n  useEffect(() => {\n    if (!containerRef.current || viewerRef.current) return;\n\n    try {\n      // Initialize Cesium viewer with minimal UI\n      const viewer = new (window as any).Cesium.Viewer(containerRef.current, {\n        terrainProvider: (window as any).Cesium.createWorldTerrain(),\n        baseLayerPicker: false,\n        fullscreenButton: false,\n        geocoder: false,\n        homeButton: false,\n        infoBox: false,\n        sceneModePicker: false,\n        selectionIndicator: false,\n        timeline: false,\n        navigationHelpButton: false,\n        animation: false,\n        requestRenderMode: true,\n        maximumRenderTimeChange: Infinity,\n      });\n\n      // Set up camera for St. Andrews Old Course\n      viewer.camera.setView({\n        destination: (window as any).Cesium.Cartesian3.fromDegrees(-2.82, 56.348, 300),\n        orientation: {\n          heading: 0,\n          pitch: -0.5,\n          roll: 0\n        }\n      });\n\n      viewerRef.current = viewer;\n      setViewerReady(true);\n\n      return () => {\n        if (viewerRef.current) {\n          viewerRef.current.destroy();\n          viewerRef.current = null;\n        }\n      };\n    } catch (error) {\n      console.error('Failed to initialize Cesium viewer:', error);\n    }\n  }, []);\n\n  // Add point markers\n  useEffect(() => {\n    if (!viewerRef.current || !viewerReady) return;\n\n    const viewer = viewerRef.current;\n    viewer.entities.removeAll();\n\n    // Add start point\n    if (state.start) {\n      viewer.entities.add({\n        position: (window as any).Cesium.Cartesian3.fromDegrees(state.start.lon, state.start.lat),\n        billboard: {\n          image: 'data:image/svg+xml;base64,' + btoa(`\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"12\" cy=\"12\" r=\"8\" fill=\"#EF4444\" stroke=\"white\" stroke-width=\"2\"/>\n              <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"white\"/>\n            </svg>\n          `),\n          scale: 0.8,\n          verticalOrigin: (window as any).Cesium.VerticalOrigin.BOTTOM,\n        },\n        label: {\n          text: 'START',\n          font: '12pt sans-serif',\n          fillColor: (window as any).Cesium.Color.WHITE,\n          outlineColor: (window as any).Cesium.Color.BLACK,\n          outlineWidth: 2,\n          pixelOffset: new (window as any).Cesium.Cartesian2(0, -40),\n          scale: 0.8,\n        }\n      });\n    }\n\n    // Add aim point\n    if (state.aim) {\n      viewer.entities.add({\n        position: (window as any).Cesium.Cartesian3.fromDegrees(state.aim.lon, state.aim.lat),\n        billboard: {\n          image: 'data:image/svg+xml;base64,' + btoa(`\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"12\" cy=\"12\" r=\"8\" fill=\"#3B82F6\" stroke=\"white\" stroke-width=\"2\"/>\n              <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"white\"/>\n            </svg>\n          `),\n          scale: 0.8,\n          verticalOrigin: (window as any).Cesium.VerticalOrigin.BOTTOM,\n        },\n        label: {\n          text: 'AIM',\n          font: '12pt sans-serif',\n          fillColor: (window as any).Cesium.Color.WHITE,\n          outlineColor: (window as any).Cesium.Color.BLACK,\n          outlineWidth: 2,\n          pixelOffset: new (window as any).Cesium.Cartesian2(0, -40),\n          scale: 0.8,\n        }\n      });\n    }\n\n    // Add pin point\n    if (state.pin) {\n      viewer.entities.add({\n        position: (window as any).Cesium.Cartesian3.fromDegrees(state.pin.lon, state.pin.lat),\n        billboard: {\n          image: 'data:image/svg+xml;base64,' + btoa(`\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"12\" cy=\"12\" r=\"8\" fill=\"#22C55E\" stroke=\"white\" stroke-width=\"2\"/>\n              <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"white\"/>\n            </svg>\n          `),\n          scale: 0.8,\n          verticalOrigin: (window as any).Cesium.VerticalOrigin.BOTTOM,\n        },\n        label: {\n          text: 'PIN',\n          font: '12pt sans-serif',\n          fillColor: (window as any).Cesium.Color.WHITE,\n          outlineColor: (window as any).Cesium.Color.BLACK,\n          outlineWidth: 2,\n          pixelOffset: new (window as any).Cesium.Cartesian2(0, -40),\n          scale: 0.8,\n        }\n      });\n    }\n\n    // Add dispersion ellipse if both start and aim are set\n    if (state.start && state.aim) {\n      // Calculate ellipse parameters (simplified)\n      const distance = calculateDistance(state.start, state.aim);\n      const bearing = calculateBearing(state.start, state.aim);\n      \n      const semiMajor = (state.skillPreset.distPct / 100) * distance * 0.9144; // yards to meters\n      const semiMinor = distance * Math.tan(state.skillPreset.offlineDeg * Math.PI / 180) * 0.9144;\n\n      viewer.entities.add({\n        position: (window as any).Cesium.Cartesian3.fromDegrees(state.aim.lon, state.aim.lat),\n        ellipse: {\n          semiMajorAxis: semiMajor,\n          semiMinorAxis: semiMinor,\n          rotation: bearing,\n          material: (window as any).Cesium.Color.YELLOW.withAlpha(0.3),\n          outline: true,\n          outlineColor: (window as any).Cesium.Color.YELLOW,\n        }\n      });\n    }\n\n    viewer.scene.requestRender();\n  }, [state.start, state.aim, state.pin, state.skillPreset, viewerReady]);\n\n  // Handle click events for point setting\n  useEffect(() => {\n    if (!viewerRef.current || !viewerReady) return;\n\n    const viewer = viewerRef.current;\n    const handler = new (window as any).Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n\n    handler.setInputAction((click: any) => {\n      const pickedPosition = viewer.camera.pickEllipsoid(click.position, viewer.scene.globe.ellipsoid);\n      if (pickedPosition) {\n        const cartographic = (window as any).Cesium.Cartographic.fromCartesian(pickedPosition);\n        const longitude = (window as any).Cesium.Math.toDegrees(cartographic.longitude);\n        const latitude = (window as any).Cesium.Math.toDegrees(cartographic.latitude);\n        \n        // For demo, cycle through point types on click\n        if (!state.start) {\n          onPointSet('start', { lat: latitude, lon: longitude });\n        } else if (!state.aim) {\n          onPointSet('aim', { lat: latitude, lon: longitude });\n        } else if (!state.pin) {\n          onPointSet('pin', { lat: latitude, lon: longitude });\n        }\n      }\n    }, (window as any).Cesium.ScreenSpaceEventType.LEFT_CLICK);\n\n    return () => {\n      handler.destroy();\n    };\n  }, [state.start, state.aim, state.pin, onPointSet, viewerReady]);\n\n  const handleCameraPreset = (preset: 'tee' | 'green' | 'overview') => {\n    if (!viewerRef.current) return;\n\n    const viewer = viewerRef.current;\n    let destination, orientation;\n\n    switch (preset) {\n      case 'tee':\n        destination = (window as any).Cesium.Cartesian3.fromDegrees(-2.82, 56.348, 50);\n        orientation = { heading: 0, pitch: -0.2, roll: 0 };\n        break;\n      case 'green':\n        destination = (window as any).Cesium.Cartesian3.fromDegrees(-2.8185, 56.3495, 30);\n        orientation = { heading: Math.PI, pitch: -0.3, roll: 0 };\n        break;\n      case 'overview':\n        destination = (window as any).Cesium.Cartesian3.fromDegrees(-2.8192, 56.3487, 400);\n        orientation = { heading: 0, pitch: -0.7, roll: 0 };\n        break;\n    }\n\n    viewer.camera.flyTo({ destination, orientation, duration: 2 });\n  };\n\n  // Utility functions\n  function calculateDistance(p1: LatLon, p2: LatLon): number {\n    const R = 6371000;\n    const dLat = (p2.lat - p1.lat) * Math.PI / 180;\n    const dLon = (p2.lon - p1.lon) * Math.PI / 180;\n    const a = Math.sin(dLat/2) ** 2 + Math.cos(p1.lat * Math.PI/180) * Math.cos(p2.lat * Math.PI/180) * Math.sin(dLon/2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c * 1.09361; // Convert to yards\n  }\n\n  function calculateBearing(p1: LatLon, p2: LatLon): number {\n    const dLon = (p2.lon - p1.lon) * Math.PI / 180;\n    const lat1 = p1.lat * Math.PI / 180;\n    const lat2 = p2.lat * Math.PI / 180;\n    \n    const y = Math.sin(dLon) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);\n    \n    return Math.atan2(y, x);\n  }\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-secondary\">Course View</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setPhotorealEnabled(!photorealEnabled)}\n              title=\"Toggle Photorealistic 3D\"\n              className=\"h-8 w-8\"\n            >\n              <i className={`fas fa-cube ${photorealEnabled ? 'text-primary' : 'text-gray-400'}`}></i>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLayersVisible(!layersVisible)}\n              title=\"Toggle Features\"\n              className=\"h-8 w-8\"\n            >\n              <i className={`fas fa-layer-group ${layersVisible ? 'text-primary' : 'text-gray-400'}`}></i>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setSlopeArrows(!slopeArrows)}\n              title=\"Toggle Slope Arrows\"\n              className=\"h-8 w-8\"\n            >\n              <i className={`fas fa-arrow-up ${slopeArrows ? 'text-primary' : 'text-gray-400'}`}></i>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {/* 3D Canvas Container */}\n        <div className=\"relative h-96 bg-gradient-to-br from-green-100 to-green-200\">\n          <div ref={containerRef} className=\"absolute inset-0\" />\n          \n          {!viewerReady && (\n            <div className=\"absolute inset-0 bg-black bg-opacity-10 flex items-center justify-center\">\n              <div className=\"text-center text-white\">\n                <i className=\"fas fa-globe text-4xl mb-2 opacity-70\"></i>\n                <p className=\"text-sm opacity-70\">Loading 3D Course Visualization</p>\n                <p className=\"text-xs opacity-50\">Cesium Integration</p>\n              </div>\n            </div>\n          )}\n\n          {/* Status indicators */}\n          {viewerReady && (\n            <div className=\"absolute top-4 left-4 space-y-2\">\n              {!state.start && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Click to set start point\n                </Badge>\n              )}\n              {state.start && !state.aim && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Click to set aim point\n                </Badge>\n              )}\n              {state.start && state.aim && !state.pin && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Click to set pin position\n                </Badge>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Camera Controls */}\n        <div className=\"p-3 bg-slate-50 border-t border-slate-200\">\n          <div className=\"flex items-center justify-between text-xs text-gray-600\">\n            <div className=\"flex items-center space-x-4\">\n              <span>Elevation: <span className=\"font-medium\">245ft</span></span>\n              <span>Zoom: <span className=\"font-medium\">15x</span></span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"h-7 px-2 text-xs\"\n                onClick={() => handleCameraPreset('tee')}\n              >\n                Tee View\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"h-7 px-2 text-xs\"\n                onClick={() => handleCameraPreset('green')}\n              >\n                Green View\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"h-7 px-2 text-xs\"\n                onClick={() => handleCameraPreset('overview')}\n              >\n                Overview\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13383},"client/src/components/prepare/ConditionDrawer.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CONDITION_COLORS } from '../../lib/types';\n\nconst conditionTypes = [\n  { name: 'Green', color: 'golf-condition-green', icon: 'fas fa-flag' },\n  { name: 'Fairway', color: 'golf-condition-fairway', icon: 'fas fa-seedling' },\n  { name: 'Rough', color: 'golf-condition-rough', icon: 'fas fa-grass' },\n  { name: 'Bunker', color: 'golf-condition-sand', icon: 'fas fa-mountain' },\n  { name: 'Water', color: 'golf-condition-water', icon: 'fas fa-tint' },\n  { name: 'Hazard', color: 'golf-condition-hazard', icon: 'fas fa-exclamation-triangle' },\n];\n\nexport default function ConditionDrawer() {\n  const handleDrawCondition = (conditionType: string) => {\n    // TODO: Implement polygon drawing functionality\n    console.log(`Drawing ${conditionType} condition`);\n  };\n\n  const handleClearAll = () => {\n    // TODO: Implement clear all functionality\n    console.log('Clearing all conditions');\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-secondary\">Drawing Tools</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {conditionTypes.map((condition) => (\n          <Button\n            key={condition.name}\n            variant=\"outline\"\n            className=\"w-full justify-between p-3 h-auto hover:bg-slate-50 transition-colors\"\n            onClick={() => handleDrawCondition(condition.name)}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-4 h-4 rounded ${condition.color}`} />\n              <span className=\"text-sm font-medium\">{condition.name}</span>\n            </div>\n            <i className=\"fas fa-pencil-alt text-gray-400\"></i>\n          </Button>\n        ))}\n\n        <div className=\"pt-4 border-t border-slate-200\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full\"\n            onClick={handleClearAll}\n          >\n            <i className=\"fas fa-eraser mr-2\"></i>Clear All\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2164},"client/src/components/prepare/CoursePicker.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { type Course } from '@shared/schema';\n\ninterface CoursePickerProps {\n  selectedCourseId: string | null;\n  onCourseSelect: (courseId: string) => void;\n}\n\nexport default function CoursePicker({ selectedCourseId, onCourseSelect }: CoursePickerProps) {\n  const [mode, setMode] = useState<'curated' | 'search'>('curated');\n\n  const { data: courses, isLoading, error } = useQuery<Course[]>({\n    queryKey: ['/api/courses/curated'],\n    enabled: mode === 'curated',\n  });\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <p className=\"text-red-600 text-sm\">Failed to load courses. Please try again.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-secondary\">Select Course</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Mode Toggle */}\n        <div className=\"flex bg-slate-100 rounded-lg p-1\">\n          <Button\n            variant={mode === 'curated' ? 'default' : 'ghost'}\n            size=\"sm\"\n            className=\"flex-1\"\n            onClick={() => setMode('curated')}\n          >\n            Curated\n          </Button>\n          <Button\n            variant={mode === 'search' ? 'default' : 'ghost'}\n            size=\"sm\"\n            className=\"flex-1\"\n            onClick={() => setMode('search')}\n          >\n            Search\n          </Button>\n        </div>\n\n        {/* Course List */}\n        <div className=\"space-y-3\">\n          {isLoading ? (\n            // Loading skeleton\n            Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"p-3 border border-slate-200 rounded-lg\">\n                <Skeleton className=\"w-full h-20 mb-2\" />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Skeleton className=\"h-4 w-24 mb-1\" />\n                    <Skeleton className=\"h-3 w-32\" />\n                  </div>\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n              </div>\n            ))\n          ) : mode === 'search' ? (\n            // Search mode placeholder\n            <div className=\"p-8 text-center text-gray-500\">\n              <i className=\"fas fa-search text-4xl mb-4 opacity-50\"></i>\n              <p>Search functionality coming soon</p>\n            </div>\n          ) : (\n            // Curated courses\n            courses?.map((course) => (\n              <div\n                key={course.id}\n                className={`p-3 border rounded-lg hover:bg-slate-50 cursor-pointer transition-colors ${\n                  selectedCourseId === course.id ? 'border-primary bg-primary/5' : 'border-slate-200'\n                }`}\n                onClick={() => onCourseSelect(course.id)}\n              >\n                {course.thumbnailUrl && (\n                  <img \n                    src={course.thumbnailUrl} \n                    alt={`${course.name} aerial view`}\n                    className=\"w-full h-20 object-cover rounded mb-2\"\n                  />\n                )}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-secondary text-sm\">{course.name}</h4>\n                    <p className=\"text-xs text-gray-500\">{course.location}</p>\n                  </div>\n                  {course.enhanced && (\n                    <Badge variant=\"secondary\" className=\"bg-accent text-white\">\n                      Enhanced\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4036},"client/src/components/prepare/DispersionInspector.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { PrepareState } from '../../lib/types';\nimport { UniformEllipseSampler } from '../../lib/sampling';\n\ninterface DispersionInspectorProps {\n  state: PrepareState;\n}\n\nexport default function DispersionInspector({ state }: DispersionInspectorProps) {\n  const [samplingProgress, setSamplingProgress] = useState(0);\n  const [sampleCount, setSampleCount] = useState(0);\n  const [confidence, setConfidence] = useState(0.05);\n  const [status, setStatus] = useState<'idle' | 'sampling' | 'converged'>('idle');\n  const [ellipseDimensions, setEllipseDimensions] = useState({ longitudinal: 0, lateral: 0 });\n\n  // Calculate ellipse dimensions when state changes\n  useEffect(() => {\n    if (state.start && state.aim) {\n      const distance = calculateDistance(state.start, state.aim);\n      const dimensions = UniformEllipseSampler.calculateEllipseDimensions(distance, state.skillPreset);\n      setEllipseDimensions(dimensions);\n\n      // Simulate progressive sampling\n      setStatus('sampling');\n      setSamplingProgress(0);\n      setSampleCount(0);\n      \n      const interval = setInterval(() => {\n        setSamplingProgress(prev => {\n          const newProgress = Math.min(prev + Math.random() * 8 + 2, 100);\n          setSampleCount(Math.floor(50 + newProgress * 25));\n          \n          // Simulate confidence improvement\n          const newConf = 0.05 - (newProgress / 100) * 0.025;\n          setConfidence(newConf);\n\n          if (newProgress >= 100) {\n            setStatus('converged');\n            clearInterval(interval);\n          }\n          \n          return newProgress;\n        });\n      }, 200);\n\n      return () => clearInterval(interval);\n    } else {\n      setStatus('idle');\n      setSamplingProgress(0);\n      setSampleCount(0);\n      setEllipseDimensions({ longitudinal: 0, lateral: 0 });\n    }\n  }, [state.start, state.aim, state.skillPreset]);\n\n  const calculateDistance = (p1: { lat: number; lon: number }, p2: { lat: number; lon: number }) => {\n    const R = 6371000;\n    const dLat = (p2.lat - p1.lat) * Math.PI / 180;\n    const dLon = (p2.lon - p1.lon) * Math.PI / 180;\n    const a = Math.sin(dLat/2) ** 2 + Math.cos(p1.lat * Math.PI/180) * Math.cos(p2.lat * Math.PI/180) * Math.sin(dLon/2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c * 1.09361; // Convert to yards\n  };\n\n  const getStatusBadge = () => {\n    switch (status) {\n      case 'sampling':\n        return <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">Sampling</Badge>;\n      case 'converged':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Converged</Badge>;\n      default:\n        return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-600\">Idle</Badge>;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-secondary\">Dispersion Analysis</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Ellipse Dimensions */}\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Ellipse Dimensions</h4>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"text-center p-2 bg-slate-50 rounded\">\n              <p className=\"text-lg font-bold text-primary\">\n                {ellipseDimensions.longitudinal.toFixed(1)}\n              </p>\n              <p className=\"text-xs text-gray-600\">Long. (yds)</p>\n            </div>\n            <div className=\"text-center p-2 bg-slate-50 rounded\">\n              <p className=\"text-lg font-bold text-primary\">\n                {ellipseDimensions.lateral.toFixed(1)}\n              </p>\n              <p className=\"text-xs text-gray-600\">Lateral (yds)</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Sampling Info */}\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Monte Carlo Sampling</h4>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Samples:</span>\n              <span className=\"font-medium\">{sampleCount.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Confidence:</span>\n              <span className=\"font-medium\">±{confidence.toFixed(3)}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Status:</span>\n              {getStatusBadge()}\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div>\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-xs text-gray-600\">Sampling Progress</span>\n            <span className=\"text-xs text-gray-600\">{Math.floor(samplingProgress)}%</span>\n          </div>\n          <Progress value={samplingProgress} className=\"h-2\" />\n        </div>\n\n        {status === 'idle' && (\n          <div className=\"text-center py-4 text-sm text-gray-500\">\n            Set start and aim points to begin analysis\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5411},"client/src/components/prepare/HoleNavigator.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { type Hole } from '@shared/schema';\n\ninterface HoleNavigatorProps {\n  currentHole: number;\n  onHoleChange: (holeNumber: number) => void;\n}\n\nexport default function HoleNavigator({ currentHole, onHoleChange }: HoleNavigatorProps) {\n  // For demo, using St. Andrews data\n  const { data: holes, isLoading } = useQuery<Hole[]>({\n    queryKey: ['/api/courses', 'st-andrews-old-1', 'holes'],\n  });\n\n  const currentHoleData = holes?.find(h => h.number === currentHole);\n\n  const handlePrevHole = () => {\n    if (currentHole > 1) {\n      onHoleChange(currentHole - 1);\n    }\n  };\n\n  const handleNextHole = () => {\n    if (currentHole < 18) {\n      onHoleChange(currentHole + 1);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-secondary\">Hole Navigation</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handlePrevHole}\n              disabled={currentHole === 1}\n              className=\"h-8 w-8\"\n            >\n              <i className=\"fas fa-chevron-left\"></i>\n            </Button>\n            <span className=\"text-sm font-medium text-secondary min-w-[60px] text-center\">\n              Hole {currentHole}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleNextHole}\n              disabled={currentHole === 18}\n              className=\"h-8 w-8\"\n            >\n              <i className=\"fas fa-chevron-right\"></i>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Hole Grid */}\n        <div className=\"grid grid-cols-6 gap-2\">\n          {Array.from({ length: 18 }, (_, i) => i + 1).map((hole) => (\n            <Button\n              key={hole}\n              variant={hole === currentHole ? 'default' : 'outline'}\n              size=\"sm\"\n              className=\"hole-grid w-8 h-8 text-xs font-medium p-0\"\n              onClick={() => onHoleChange(hole)}\n            >\n              {hole}\n            </Button>\n          ))}\n        </div>\n\n        {/* Hole Details */}\n        {isLoading ? (\n          <div className=\"space-y-2\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"flex justify-between\">\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-4 w-8\" />\n              </div>\n            ))}\n          </div>\n        ) : currentHoleData ? (\n          <div className=\"text-sm space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Par:</span>\n              <span className=\"font-medium\">{currentHoleData.par}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Yards:</span>\n              <span className=\"font-medium\">{currentHoleData.yards}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Handicap:</span>\n              <span className=\"font-medium\">{currentHoleData.handicap}</span>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-sm text-gray-500 text-center py-4\">\n            No hole data available\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3726},"client/src/components/prepare/MetricsBar.tsx":{"content":"import { useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PrepareState } from '../../lib/types';\nimport { strokesEngine } from '../../lib/expectedStrokes';\n\ninterface MetricsBarProps {\n  state: PrepareState;\n}\n\nexport default function MetricsBar({ state }: MetricsBarProps) {\n  // Calculate distances and metrics\n  const metrics = useMemo(() => {\n    if (!state.start || !state.pin) {\n      return {\n        totalDistance: 0,\n        aimDistance: 0,\n        expectedStrokes: 0,\n        avgProximity: 0,\n        conditionBreakdown: []\n      };\n    }\n\n    const totalDistance = calculateDistance(state.start, state.pin);\n    const aimDistance = state.aim ? calculateDistance(state.start, state.aim) : totalDistance * 0.9;\n    \n    // Calculate Expected Strokes using the engine\n    const expectedStrokes = strokesEngine.calculateExpectedStrokes(aimDistance, 'fairway');\n    \n    // Mock proximity calculation (in real implementation, this would come from dispersion analysis)\n    const avgProximity = 8 + Math.random() * 8;\n\n    // Mock condition breakdown (in real implementation, this would come from mask analysis)\n    const conditionBreakdown = [\n      { condition: 'Fairway', percentage: 65, color: 'golf-condition-fairway' },\n      { condition: 'Rough', percentage: 25, color: 'golf-condition-rough' },\n      { condition: 'Bunker', percentage: 8, color: 'golf-condition-sand' },\n      { condition: 'Water', percentage: 2, color: 'golf-condition-water' },\n    ];\n\n    return {\n      totalDistance: Math.round(totalDistance),\n      aimDistance: Math.round(aimDistance),\n      expectedStrokes: expectedStrokes,\n      avgProximity: avgProximity,\n      conditionBreakdown\n    };\n  }, [state.start, state.pin, state.aim]);\n\n  const calculateDistance = (p1: { lat: number; lon: number }, p2: { lat: number; lon: number }) => {\n    const R = 6371000; // Earth radius in meters\n    const dLat = (p2.lat - p1.lat) * Math.PI / 180;\n    const dLon = (p2.lon - p1.lon) * Math.PI / 180;\n    const a = Math.sin(dLat/2) ** 2 + Math.cos(p1.lat * Math.PI/180) * Math.cos(p2.lat * Math.PI/180) * Math.sin(dLon/2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c * 1.09361; // Convert to yards\n  };\n\n  return (\n    <Card className=\"mt-6\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-secondary\">Shot Metrics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Main Metrics Grid */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-primary\">{metrics.totalDistance}</p>\n            <p className=\"text-xs text-gray-600\">Total Distance (yds)</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-accent\">{metrics.aimDistance}</p>\n            <p className=\"text-xs text-gray-600\">Aim Distance (yds)</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-orange-600\">{metrics.expectedStrokes.toFixed(2)}</p>\n            <p className=\"text-xs text-gray-600\">Expected Strokes</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-purple-600\">{metrics.avgProximity.toFixed(1)}</p>\n            <p className=\"text-xs text-gray-600\">Avg Proximity (ft)</p>\n          </div>\n        </div>\n\n        {/* Condition Breakdown */}\n        {metrics.conditionBreakdown.length > 0 && (\n          <div className=\"pt-4 border-t border-slate-200\">\n            <h4 className=\"text-sm font-medium text-secondary mb-3\">Landing Conditions</h4>\n            <div className=\"flex flex-wrap items-center gap-4\">\n              {metrics.conditionBreakdown.map((condition, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  <div className={`w-3 h-3 rounded ${condition.color}`} />\n                  <span className=\"text-sm text-gray-600\">\n                    {condition.condition} {condition.percentage}%\n                  </span>\n                </div>\n              ))}\n            </div>\n\n            {/* Visual Condition Bar */}\n            <div className=\"mt-3 w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n              {metrics.conditionBreakdown.map((condition, index) => (\n                <div\n                  key={index}\n                  className={`h-full ${condition.color} inline-block`}\n                  style={{ width: `${condition.percentage}%` }}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Empty State */}\n        {metrics.totalDistance === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <i className=\"fas fa-chart-bar text-4xl mb-4 opacity-30\"></i>\n            <p className=\"text-sm\">Set start and pin positions to view metrics</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5040},"client/src/components/prepare/OptimizerPanel.tsx":{"content":"import { useState, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { PrepareState, AimCandidate } from '../../lib/types';\n\ninterface OptimizerPanelProps {\n  state: PrepareState;\n}\n\nexport default function OptimizerPanel({ state }: OptimizerPanelProps) {\n  const [isOptimizing, setIsOptimizing] = useState(false);\n  const [optimizationProgress, setOptimizationProgress] = useState(0);\n  const [candidates, setCandidates] = useState<AimCandidate[]>([]);\n  const workerRef = useRef<Worker | null>(null);\n\n  const canOptimize = state.start && state.pin && state.skillPreset;\n\n  const handleRunOptimizer = () => {\n    if (!canOptimize || isOptimizing) return;\n\n    setIsOptimizing(true);\n    setOptimizationProgress(0);\n    setCandidates([]);\n\n    // Create worker for optimization\n    try {\n      // For demo, simulate optimization results instead of creating worker\n      // In production, this would use the actual optimizer worker\n      simulateOptimization();\n    } catch (error) {\n      console.error('Failed to start optimization:', error);\n      setIsOptimizing(false);\n    }\n  };\n\n  const simulateOptimization = () => {\n    const progressInterval = setInterval(() => {\n      setOptimizationProgress(prev => {\n        const newProgress = Math.min(prev + Math.random() * 15 + 5, 100);\n        \n        if (newProgress >= 100) {\n          clearInterval(progressInterval);\n          setIsOptimizing(false);\n          \n          // Generate mock optimization results\n          const mockCandidates: AimCandidate[] = [\n            {\n              aim: { lat: state.pin!.lat - 0.001, lon: state.pin!.lon + 0.002 },\n              es: { mean: 3.742, ci95: 0.021, n: 2000, countsByClass: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 50, 6: 1300, 7: 600, 8: 50 } },\n              distanceYds: 375\n            },\n            {\n              aim: { lat: state.pin!.lat - 0.0008, lon: state.pin!.lon + 0.0015 },\n              es: { mean: 3.771, ci95: 0.019, n: 1950, countsByClass: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 45, 6: 1200, 7: 650, 8: 55 } },\n              distanceYds: 355\n            },\n            {\n              aim: { lat: state.pin!.lat - 0.0012, lon: state.pin!.lon + 0.0025 },\n              es: { mean: 3.812, ci95: 0.025, n: 1800, countsByClass: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 40, 6: 1100, 7: 600, 8: 60 } },\n              distanceYds: 390\n            }\n          ];\n          \n          setCandidates(mockCandidates);\n        }\n        \n        return newProgress;\n      });\n    }, 100);\n  };\n\n  const handleCancelOptimization = () => {\n    if (workerRef.current) {\n      workerRef.current.postMessage({ type: 'CANCEL' });\n    }\n    setIsOptimizing(false);\n    setOptimizationProgress(0);\n  };\n\n  const getESDisplay = (candidate: AimCandidate) => {\n    return `${candidate.es.mean.toFixed(3)} ± ${candidate.es.ci95.toFixed(3)}`;\n  };\n\n  const getOptimalDifference = (candidate: AimCandidate, optimal: AimCandidate) => {\n    const diff = candidate.es.mean - optimal.es.mean;\n    return diff > 0 ? `+${diff.toFixed(2)}` : diff.toFixed(2);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-secondary\">Aim Optimizer</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Run/Cancel Button */}\n        <Button\n          className=\"w-full\"\n          onClick={isOptimizing ? handleCancelOptimization : handleRunOptimizer}\n          disabled={!canOptimize}\n          variant={isOptimizing ? \"destructive\" : \"default\"}\n        >\n          {isOptimizing ? (\n            <>\n              <i className=\"fas fa-stop mr-2\"></i>\n              Cancel Optimizer\n            </>\n          ) : (\n            <>\n              <i className=\"fas fa-play mr-2\"></i>\n              Run Optimizer\n            </>\n          )}\n        </Button>\n\n        {/* Progress Bar */}\n        {isOptimizing && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center text-xs text-gray-600\">\n              <span>Optimizing...</span>\n              <span>{Math.floor(optimizationProgress)}%</span>\n            </div>\n            <Progress value={optimizationProgress} className=\"h-2\" />\n          </div>\n        )}\n\n        {/* Results */}\n        {candidates.length > 0 && (\n          <div className=\"space-y-3\">\n            <h4 className=\"text-sm font-medium text-gray-700\">Optimization Results</h4>\n            \n            <div className=\"space-y-2\">\n              {candidates.map((candidate, index) => (\n                <div\n                  key={index}\n                  className={`p-3 rounded-lg border ${\n                    index === 0 \n                      ? 'bg-green-50 border-green-200' \n                      : 'bg-slate-50 border-slate-200'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-center mb-1\">\n                    <span className={`text-sm font-medium ${\n                      index === 0 ? 'text-green-800' : 'text-gray-700'\n                    }`}>\n                      {index === 0 ? 'Optimal Aim' : `Alternative ${index}`}\n                    </span>\n                    <Badge \n                      variant=\"secondary\" \n                      className={index === 0 ? 'bg-green-200 text-green-800' : 'bg-gray-100 text-gray-600'}\n                    >\n                      {index === 0 ? 'Best' : getOptimalDifference(candidate, candidates[0])}\n                    </Badge>\n                  </div>\n                  <div className={`text-sm ${\n                    index === 0 ? 'text-green-700' : 'text-gray-600'\n                  }`}>\n                    <p>ES: <span className=\"font-medium\">{getESDisplay(candidate)}</span></p>\n                    <p>Distance: <span className=\"font-medium\">{candidate.distanceYds} yds</span></p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* No results state */}\n        {!canOptimize && (\n          <div className=\"text-center py-4 text-sm text-gray-500\">\n            Set start, pin, and skill level to run optimizer\n          </div>\n        )}\n\n        {candidates.length === 0 && !isOptimizing && canOptimize && (\n          <div className=\"text-center py-4 text-sm text-gray-500\">\n            Click \"Run Optimizer\" to find optimal aim points\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6620},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}